/* queue.h -- интерфейс очереди */
#include<sys/types.h>
#include<stdbool.h>
#ifndef _QUEUE_H_
#define _QUEUE_H_

typedef struct node
{
	pid_t payload;		// полезная нагрузка узла
	struct node * next;	// следующий элемент в очереди
	struct node * prev;	// предыдущий элемент в очереди
} Node;

typedef struct
{
	Node * head;		// указатель на голову очереди
	Node * tail;		// указатель на хвост очереди
	unsigned int count;	// количество элементов в очереди
} Queue;

/* Операция: инициализация очереди 				*/
/* Предусловия: pq указывает на очередь				*/
/* Постусловия: очередь инициализирована пустым содержимым	*/
void InitializeQueue(Queue * pq);

/* Операция: проверка, пуста ли очередь									*/
/* Предусловия: pq указывает на инициализированную очередь						*/
/* постусловия: функция возвращает true при пустом содержимом очереди, false - в противном случае	*/
bool QueueIsEmpty(const Queue * pq);

/* Операция: добавление элемента в конец очереди 							*/
/* Предусловия: pid - элемент, добавляемый в очередь, pq указывает на инициализированную очередь	*/
/* Постусловия: в случае успешного добавления элемента pid в конец очереди, функция возвращает true,	*/
/* в противном случае - false										*/
bool EnQueue(pid_t pid, Queue * pq);

/* Операция: удаление элемента из начала очереди						*/
/* Предусловия: pq указывает на инициализированную очередь					*/
/* Постусловия: в случае успеха, функция запишет PID процесса, стоявшего в очереди первым	*/
/* 		по адресу pid, если очередь пуста, возвращается false				*/
bool DeQueue(pid_t * pid, Queue * pq);


/* Операция: опустошение очереди 					*/
/* Предусловие: pq указывает на ранее инициализированную очередь	*/
/* Постусловия: очередь пуста						*/
void EmptyQueue(Queue * pq);

#endif
